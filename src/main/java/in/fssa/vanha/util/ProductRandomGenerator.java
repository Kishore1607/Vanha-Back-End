package in.fssa.vanha.util;

import java.util.Random;

public class ProductRandomGenerator {

	/**
	 * Generates a random ID string consisting of a single alphabet character
	 * followed by four digits.
	 *
	 * @return A random ID string.
	 */
	public String idGenerator() {
		String alpha = "abcdefghijklmnopqrstuvwyz";
		String number = "0987654321";
		String id = "";
		int alpI = (int) (Math.random() * alpha.length());
		char alph = alpha.charAt(alpI);
		id += alph;
		for (int i = 0; i < 4; i++) {
			int numI = (int) (Math.random() * number.length());
			char num = number.charAt(numI);
			id += num;
		}
		return id;
	}

	/**
	 * Generates a random category from a predefined list of categories.
	 *
	 * @return A randomly selected category from the list.
	 */
	public String categoryGenerator() {

		String[] cateNames = { "bike", "car", "computer", "mobile", };

		Random random = new Random();
		int randomIndex = random.nextInt(cateNames.length);
		String randomcategory = cateNames[randomIndex];

		return randomcategory;

	}

	/**
	 * Generates a random duration unit, such as "month" or "year".
	 *
	 * @return A randomly selected duration unit as a String.
	 */
	public String usedDurationGenerator() {

		String[] durNames = { "month", "year" };

		Random random = new Random();
		int randomIndex = random.nextInt(durNames.length);
		String randomDuration = durNames[randomIndex];

		return randomDuration;

	}

	/**
	 * Generates a random integer representing a period of use between 1 and 25.
	 *
	 * @return A random integer between 1 (inclusive) and 25 (inclusive).
	 */
	public int usedPeriodGenerator() {

		int min = 1;
		int max = 25;

		int randomValue = min + (int) (Math.random() * (max - min + 1));

		return randomValue;

	}

	int price = 0;

	/**
	 * Generates a random price within the specified range and sets it as the
	 * current price.
	 *
	 * @return The randomly generated price as an integer.
	 */
	public int priceGenerator() {

		int min = 10000;
		int max = 80000;

		int randomValue = min + (int) (Math.random() * (max - min + 1));

		this.price = randomValue;

		return randomValue;

	}

	/**
	 * Calculates the minimum price generated by reducing the current price by 1500
	 * units.
	 *
	 * @return The minimum price generated by subtracting 1500 from the current
	 *         price.
	 */
	public int minPriceGenerator() {

		return this.price - 1500;

	}

	/**
	 * Generates a random text containing alphabetic characters and spaces.
	 *
	 * This method generates a random text by randomly selecting characters from the
	 * given alphabet and inserting spaces at regular intervals.
	 *
	 * @return A randomly generated text with alphabetic characters and spaces.
	 */
	public String textGenerator() {
		String alpha = "abcdefghijklmnopqrstuvwyz";
		String text = "";
		for (int i = 0; i < 100; i++) {
			if (i % 6 == 0) {
				text += " ";
			} else {
				int alph = (int) (Math.random() * alpha.length());
				char value = alpha.charAt(alph);
				text += value;
			}
		}
		return text;
	}

	/**
	 * Generates a name for a new item based on the provided category.
	 *
	 * @param category The category of the item for which to generate a name.
	 *                 Supported categories are "bike", "car", "computer", and
	 *                 "mobile".
	 * @return A name for the new item corresponding to the provided category. If
	 *         the category is not recognized, it returns null.
	 */
	public String nameGenerator(String category) {
		String name = null;
		if (category == "bike") {
			name = "New Bike";
		}
		if (category == "car") {
			name = "New Car";
		}
		if (category == "computer") {
			name = "New Laptop";
		}
		if (category == "mobile") {
			name = "New Mobile Phone";
		}
		return name;
	}

	/**
	 * Generates a URL for an image based on the provided category.
	 *
	 * This method takes a category as input and returns a URL that can be used to
	 * fetch an image related to that category from an external source.
	 *
	 * @param category The category for which you want to generate an image URL.
	 *                 Supported categories: "bike," "car," "computer," "mobile."
	 *
	 * @return A URL for an image corresponding to the provided category, or null if
	 *         the category is not supported.
	 */
	public String assetGenerator(String category) {
		String image = null;
		if (category == "bike") {
			image = "https://source.unsplash.com/featured/?motorcycle";
		}
		if (category == "car") {
			image = "https://source.unsplash.com/featured/?car";
		}
		if (category == "computer") {
			image = "https://source.unsplash.com/featured/?laptop";
		}
		if (category == "mobile") {
			image = "https://source.unsplash.com/featured/?mobile-phone";
		}
		return image;
	}
}
